function y = coarse_FOC(x,kDC)
% 粗频偏补偿函数
% 本函数实现粗频率偏移补偿，为后续自适应均衡提供预处理
% 主要功能：
%   1. 基于功率谱分析的频偏估计
%   2. 频偏相位补偿
%   3. DC成分消除
% 输入参数：
%   x           - 接收信号矩阵（列向量为不同通道，2倍过采样）
%   Parameters  - 参数结构体（包含kDC等参数）
% 输出参数：
%   y           - 频偏补偿后的信号（保持2SPS）

%% 从参数结构体中获取参数
% kDC  = Parameters.kDC;  % DC消除的记忆深度（滑动窗口长度）


%% 频偏估计与补偿
% 使用Welch方法计算功率谱密度（用于频偏估计）
pxx = pwelch(x);       % 计算各通道功率谱（默认分段长度）
                      % pxx矩阵尺寸：[nfft/2+1 x 通道数]

% 寻找主峰频率位置
[~,idx] = max(sum(pxx,2),[],1); % 在频率维度求各通道功率谱和，找最大功率点
                                % idx为主峰对应的频点索引

% 计算实际频偏（单位：DFT bin）
f0 = round((idx-1)*size(x,1)/size(pxx,1)); 
% 公式说明：
% size(pxx,1)为DFT点数，size(x,1)为信号长度
% 将归一化频率转换为实际频点位置

%% 频偏过大处理
% 判断归一化频率是否在(0.25, 0.75)范围内（超过信号带宽的25%）
if any(f0/size(x,1)>0.25 & f0/size(x,1)<0.75)
    warning('频偏过大超出补偿范围，已禁用补偿'); % 发出警告
    y = x; % 返回原始信号
    return; 
end

%% 相位补偿信号生成
% 构建线性相位向量（用于频偏补偿）
ph = 2*pi*repmat((0:size(x,1)-1)',1,size(x,2))... % 生成时间轴[0:N-1]'
    ./size(x,1)...                               % 归一化频率
    .*repmat(f0,size(x,1),1);                    % 乘以频偏系数

% 应用频偏补偿（通过复数旋转）
y = x.*exp(-1j*ph); % 频域效果：将信号频谱平移f0个bin

%% DC成分消除
% 使用滑动平均法去除直流偏移
y = y - movmean(y,kDC,1); 
% 参数说明：
% kDC - 滑动窗口长度（样本数）
% 1   - 沿行方向滑动（每个通道独立处理）
end
